{"version":3,"sources":["sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","index.js"],"names":["animationType","colors","sort","type","values","animations","merge","arr","l","m","r","temp","slice","left","right","pos","push","createColorAnimation","createSwapAnimation","parseInt","length","mergeSort","n","i","j","swap","bubbleSort","heapify","heapSort","partition","start","end","pivotValue","pivotIndex","index","quickSort","minIndex","selectionSort","gap","shrink","swapped","combSort","gnomeSort","sorted","oddEvenSort","barsToColor","color","swapIndices","swapValues","SortingVisualizer","nbValuesSlider","useRef","delaySlider","useState","setValues","nbValues","setNbValues","barWidth","setBarWidth","animationDelay","setAnimationDelay","isAnimating","setIsAnimating","undefined","currentAnimationID","setCurrentAnimationID","resetValues","el","document","getElementById","style","backgroundColor","resetBarsColor","min","max","array","Math","floor","random","clearAnimation","clearInterval","bars","getElementsByClassName","animate","animation","forEach","barIndex","idx","height","setTimeout","intervalID","setInterval","startSortedAnimation","startSortingAnimation","sortingAlgorithms","id","useEffect","width","calculateBarWidth","buttons","current","setAttribute","classList","add","disableControls","removeAttribute","remove","enableControls","disabledBtnStyle","borderColor","cursor","className","onClick","ref","defaultValue","onChange","value","map","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ecfcc1e8.chunk.js","sourcesContent":["export const animationType = {\r\n    color: \"color\",\r\n    swap: \"swap\",\r\n}\r\n\r\nexport const colors = {\r\n    unsorted: \"#37aff7\",\r\n    selected: \"#ff7043\",\r\n    sorted: \"#54ff51\",\r\n}\r\n\r\nexport default function sort(type, values) {\r\n    switch (type) {\r\n        case \"merge\":\r\n            return mergeSort(values);\r\n        case \"bubble\":\r\n            return bubbleSort(values);\r\n        case \"heap\":\r\n            return heapSort(values);\r\n        case \"quick\":\r\n            return quickSort(values);\r\n        case \"selection\":\r\n            return selectionSort(values);\r\n        case \"comb\":\r\n            return combSort(values);\r\n        case \"gnome\":\r\n            return gnomeSort(values);\r\n        case \"oddeven\":\r\n            return oddEvenSort(values);\r\n        default:\r\n            return [];\r\n    }\r\n}\r\n\r\nfunction mergeSort(values) {\r\n    const animations = [];\r\n    function merge(arr, l, m, r) {\r\n        let temp = arr.slice();\r\n        let left = l;\r\n        let right = m + 1;\r\n        let pos = left;\r\n\r\n        while (left <= m || right <= r) {\r\n            if (left <= m && right <= r) {\r\n                if (temp[left] <= temp[right]) {\r\n                    if (pos !== left) {\r\n                        animations.push(createColorAnimation([pos, left]))\r\n                        animations.push(createSwapAnimation([pos, left], [pos], [temp[left]]));\r\n                    }\r\n\r\n                    arr[pos++] = temp[left++];\r\n                }\r\n                else {\r\n                    if (pos !== right) {\r\n                        animations.push(createColorAnimation([pos, right]))\r\n                        animations.push(createSwapAnimation([pos, right], [pos], [temp[right]]));\r\n                    }\r\n                    arr[pos++] = temp[right++];\r\n                }\r\n            }\r\n            else if (left <= m) {\r\n                if (pos !== left) {\r\n                    animations.push(createColorAnimation([pos, left]))\r\n                    animations.push(createSwapAnimation([pos, left], [pos], [temp[left]]));\r\n                }\r\n                arr[pos++] = temp[left++];\r\n            }\r\n            else if (right <= r) {\r\n                if (pos !== right) {\r\n                    animations.push(createColorAnimation([pos, right]))\r\n                    animations.push(createSwapAnimation([pos, right], [pos], [temp[right]]));\r\n                }\r\n                arr[pos++] = temp[right++];\r\n            }\r\n        }\r\n    }\r\n\r\n    function sort(arr, l, r) {\r\n        if (l < r) {\r\n            const m = parseInt((l + r) / 2);\r\n            sort(arr, l, m);\r\n            sort(arr, m + 1, r);\r\n            merge(arr, l, m, r);\r\n        }\r\n    }\r\n\r\n    sort(values, 0, values.length - 1);\r\n    return animations;\r\n}\r\n\r\nfunction bubbleSort(values) {\r\n    const animations = [];\r\n    const n = values.length;\r\n\r\n    for (let i = 0; i < n; i++) {\r\n        for (let j = 0; j < n - i - 1; j++) {\r\n            if (values[j] > values[j + 1]) {\r\n                animations.push(createColorAnimation([j, j + 1]));\r\n                animations.push(createSwapAnimation([j, j + 1], [j, j + 1], [values[j + 1], values[j]]));\r\n                swap(values, j, j + 1);\r\n            }\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction heapSort(values) {\r\n    const animations = [];\r\n    function heapify(arr, i, m) {\r\n        let j;\r\n        while (2 * i + 1 <= m) {\r\n            j = 2 * i + 1;\r\n            if (j < m) {\r\n                if (arr[j] < arr[j + 1])\r\n                    j++;\r\n            }\r\n            if (arr[i] < arr[j]) {\r\n                animations.push(createColorAnimation([i, j]));\r\n                animations.push(createSwapAnimation([i, j], [i, j], [arr[j], arr[i]]));\r\n                swap(arr, i, j);\r\n                i = j;\r\n            }\r\n            else {\r\n                i = m;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let i = parseInt((values.length - 2) / 2); i >= 0; i--) {\r\n        heapify(values, i, values.length - 1);\r\n    }\r\n    for (let i = values.length - 1; i > 0; i--) {\r\n        animations.push(createColorAnimation([0, i]));\r\n        animations.push(createSwapAnimation([0, i], [0, i], [values[i], values[0]]));\r\n        swap(values, 0, i);\r\n        heapify(values, 0, i - 1);\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction quickSort(values) {\r\n    const animations = [];\r\n    function partition(arr, start, end) {\r\n        const pivotValue = arr[end];\r\n        let pivotIndex = start;\r\n        for (let i = start; i < end; i++) {\r\n            if (arr[i] < pivotValue) {\r\n                if (i !== pivotIndex) {\r\n                    animations.push(createColorAnimation([i, pivotIndex]));\r\n                    animations.push(createSwapAnimation([i, pivotIndex], [i, pivotIndex], [arr[pivotIndex], arr[i]]));\r\n                }\r\n                [arr[i], arr[pivotIndex]] = [arr[pivotIndex], arr[i]];\r\n                pivotIndex++;\r\n            }\r\n        }\r\n\r\n        if (end !== pivotIndex) {\r\n            animations.push(createColorAnimation([end, pivotIndex]));\r\n            animations.push(createSwapAnimation([end, pivotIndex], [end, pivotIndex], [arr[pivotIndex], arr[end]]));\r\n        }\r\n        [arr[pivotIndex], arr[end]] = [arr[end], arr[pivotIndex]]\r\n        return pivotIndex;\r\n    };\r\n\r\n    function sort(arr, start, end) {\r\n        if (start >= end) {\r\n            return;\r\n        }\r\n        let index = partition(arr, start, end);\r\n        sort(arr, start, index - 1);\r\n        sort(arr, index + 1, end);\r\n    }\r\n\r\n    sort(values, 0, values.length - 1);\r\n    return animations;\r\n}\r\n\r\nfunction selectionSort(values) {\r\n    const animations = [];\r\n    for (let i = 0; i < values.length - 1; i++) {\r\n        let minIndex = i;\r\n        for (let j = i + 1; j < values.length; j++) {\r\n            if (values[j] < values[minIndex]) {\r\n                minIndex = j;\r\n            }\r\n        }\r\n        if (i !== minIndex) {\r\n            animations.push(createColorAnimation([i, minIndex]));\r\n            animations.push(createSwapAnimation([i, minIndex], [i, minIndex], [values[minIndex], values[i]]));\r\n        }\r\n        swap(values, i, minIndex);\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction combSort(values) {\r\n    const animations = [];\r\n    let gap = values.length;\r\n    const shrink = 1.3;\r\n    let swapped = false;\r\n    let i;\r\n    while (gap !== 1 || swapped) {\r\n        gap = parseInt(gap / shrink);\r\n        if (gap < 1)\r\n            gap = 1;\r\n        i = 0;\r\n        swapped = false;\r\n        while (i + gap < values.length) {\r\n            if (values[i] > values[i + gap]) {\r\n                animations.push(createColorAnimation([i, i + gap]));\r\n                animations.push(createSwapAnimation([i, i + gap], [i, i + gap], [values[i + gap], values[i]]));\r\n                const temp = values[i];\r\n                values[i] = values[i + gap];\r\n                values[i + gap] = temp;\r\n                swapped = true;\r\n            }\r\n            i++\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction gnomeSort(values) {\r\n    const animations = [];\r\n    let pos = 1;\r\n    while (pos < values.length) {\r\n        if (values[pos] >= values[pos - 1]) {\r\n            pos++;\r\n        }\r\n        else {\r\n            animations.push(createColorAnimation([pos, pos - 1]));\r\n            animations.push(createSwapAnimation([pos, pos - 1], [pos, pos - 1], [values[pos - 1], values[pos]]));\r\n            swap(values, pos, pos - 1);\r\n            if (pos > 1)\r\n                pos--;\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction oddEvenSort(values) {\r\n    const animations = [];\r\n    let sorted = false;\r\n    while (!sorted) {\r\n        sorted = true;\r\n        for (let i = 1; i < values.length - 1; i += 2) {\r\n            if (values[i] > values[i + 1]) {\r\n                animations.push(createColorAnimation([i, i + 1]));\r\n                animations.push(createSwapAnimation([i, i + 1], [i, i + 1], [values[i + 1], values[i]]));\r\n                swap(values, i, i + 1);\r\n                sorted = false;\r\n            }\r\n        }\r\n        for (let i = 0; i < values.length - 1; i += 2) {\r\n            if (values[i] > values[i + 1]) {\r\n                animations.push(createColorAnimation([i, i + 1]));\r\n                animations.push(createSwapAnimation([i, i + 1], [i, i + 1], [values[i + 1], values[i]]));\r\n                swap(values, i, i + 1);\r\n                sorted = false;\r\n            }\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction swap(arr, i, j) {\r\n    [arr[i], arr[j]] = [arr[j], arr[i]];\r\n}\r\n\r\nfunction createColorAnimation(barsToColor, color) {\r\n    return {\r\n        type: animationType.color,\r\n        color: color ? color : colors.selected,\r\n        barsToColor: barsToColor\r\n    }\r\n}\r\n\r\nfunction createSwapAnimation(barsToColor, swapIndices, swapValues) {\r\n    return {\r\n        type: animationType.swap,\r\n        color: colors.unsorted,\r\n        barsToColor: barsToColor,\r\n        swapIndices: swapIndices,\r\n        swapValues: swapValues\r\n    }\r\n}","import React, { useState, useEffect, useRef } from 'react'\r\nimport sortingAlgorithms, { animationType, colors } from '../sortingAlgorithms'\r\nimport './SortingVisualizer.css'\r\n\r\nconst SORTED_ANIMATION_SPEED = 5;\r\nconst MIN_HEIGHT = 5;\r\nconst MAX_HEIGHT = 500;\r\n\r\nfunction SortingVisualizer() {\r\n\r\n    const nbValuesSlider = useRef();\r\n    const delaySlider = useRef();\r\n\r\n    const [values, setValues] = useState([]);\r\n    const [nbValues, setNbValues] = useState(50);\r\n    const [barWidth, setBarWidth] = useState();\r\n    const [animationDelay, setAnimationDelay] = useState(25);\r\n    const [isAnimating, setIsAnimating] = useState(false);\r\n    const [currentAnimationID, setCurrentAnimationID] = useState(undefined);\r\n\r\n    useEffect(() => {\r\n        resetValues();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        calculateBarWidth();\r\n    }, [values])\r\n\r\n    useEffect(() => {\r\n        resetValues();\r\n    }, [nbValues])\r\n\r\n    useEffect(() => {\r\n        (isAnimating && disableControls()) || (!isAnimating && enableControls());\r\n    }, [isAnimating]);\r\n\r\n    function generateNewArray() {\r\n        clearAnimation();\r\n        resetValues();\r\n    }\r\n\r\n    function resetValues() {\r\n        resetBarsColor();\r\n        const array = [];\r\n        for (let i = 0; i < nbValues; i++) {\r\n            array.push(getRandomInt(MIN_HEIGHT, MAX_HEIGHT));\r\n        }\r\n        setValues(array);\r\n    }\r\n\r\n    function resetBarsColor() {\r\n        for (let i = 0; i < nbValues; i++) {\r\n            const el = document.getElementById(i);\r\n            if (el) {\r\n                el.style.backgroundColor = colors.unsorted;\r\n            }\r\n        }\r\n    }\r\n\r\n    function calculateBarWidth() {\r\n        const width = 30 * 50 / values.length;\r\n        setBarWidth(Math.min(100, width));\r\n    }\r\n\r\n    function clearAnimation() {\r\n        if (isAnimating) {\r\n            clearInterval(currentAnimationID);\r\n            setCurrentAnimationID(undefined);\r\n            setIsAnimating(false);\r\n        }\r\n    }\r\n\r\n    function updateNbValues() {\r\n        clearAnimation();\r\n        const value = nbValuesSlider.current.value;\r\n        setNbValues(value);\r\n    }\r\n\r\n    function updateAnimationDelay() {\r\n        if (isAnimating) return;\r\n        const value = delaySlider.current.value;\r\n        setAnimationDelay(value);\r\n    }\r\n\r\n\r\n    function sort(type) {\r\n        setIsAnimating(true);\r\n        const animations = sortingAlgorithms(type, values.slice());\r\n        startSortingAnimation(animations);\r\n    }\r\n\r\n    function disableControls() {\r\n        const buttons = document.getElementsByClassName(\"sort-btn\");\r\n        delaySlider.current.setAttribute(\"disabled\", \"\");\r\n        for (let i = 0; i < buttons.length; i++) {\r\n            buttons[i].setAttribute(\"disabled\", \"\");\r\n            buttons[i].classList.add(\"disabled\");\r\n        }\r\n    }\r\n\r\n    function enableControls() {\r\n        setIsAnimating(false);\r\n        delaySlider.current.removeAttribute(\"disabled\");\r\n        const buttons = document.getElementsByClassName(\"sort-btn\");\r\n        for (let i = 0; i < buttons.length; i++) {\r\n            buttons[i].removeAttribute(\"disabled\");\r\n            buttons[i].classList.remove(\"disabled\");\r\n        }\r\n    }\r\n\r\n    function startSortingAnimation(animations) {\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n        function animate(animation) {\r\n            if (animation.type === animationType.color) {\r\n                animation.barsToColor.forEach(barIndex => {\r\n                    bars[barIndex].style.backgroundColor = animation.color;\r\n                })\r\n            }\r\n            else if (animation.type === animationType.swap) {\r\n                animation.swapIndices.forEach((barIndex, idx) => {\r\n                    bars[barIndex].style.height = `${animation.swapValues[idx]}px`;\r\n                })\r\n                setTimeout(() => {\r\n                    animation.barsToColor.forEach(barIndex => {\r\n                        bars[barIndex].style.backgroundColor = animation.color;\r\n                    })\r\n                }, animationDelay * 0.95);\r\n            }\r\n        }\r\n\r\n        animate(animations[0]);\r\n        let idx = 1;\r\n        const intervalID = setInterval(() => {\r\n            if (idx === animations.length - 1) {\r\n                clearInterval(intervalID);\r\n                setTimeout(startSortedAnimation, animationDelay);\r\n            }\r\n\r\n            animate(animations[idx]);\r\n            idx++;\r\n        }, animationDelay)\r\n\r\n        setCurrentAnimationID(intervalID);\r\n    }\r\n\r\n    function startSortedAnimation() {\r\n        function animate(id) {\r\n            const bar = document.getElementById(id);\r\n            bar.style.backgroundColor = colors.sorted;\r\n        }\r\n\r\n        animate(0);\r\n        let idx = 1;\r\n        const intervalID = setInterval(() => {\r\n            if (idx === values.length) {\r\n                clearInterval(intervalID);\r\n                return;\r\n            }\r\n            animate(idx);\r\n            idx++;\r\n        }, SORTED_ANIMATION_SPEED)\r\n\r\n        setCurrentAnimationID(intervalID);\r\n    }\r\n\r\n    const disabledBtnStyle = {\r\n        color: \"rgba(255, 255, 255, 0.7)\",\r\n        backgroundColor: \"rgba(255, 0, 0, 0.3)\",\r\n        borderColor: \"rgba(255, 0, 0, 0.3)\",\r\n        cursor: \"not-allowed\",\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"top\">\r\n                <div className=\"left\">\r\n                    <button className=\"header-btn\" onClick={generateNewArray}>Generate new array</button>\r\n                    <div className=\"input-frame\">\r\n                        <input ref={nbValuesSlider} type=\"range\" min=\"10\" max=\"300\" defaultValue={nbValues} className=\"input\" onChange={updateNbValues} />\r\n                        <span style={{ width: \"8ch\" }} className=\"input-label\">{values.length} bars</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"right\">\r\n                    <div className={`input-frame ${isAnimating && \"disabled-frame\"}`}>\r\n                        <input ref={delaySlider} type=\"range\" min=\"10\" max=\"200\" defaultValue={animationDelay} className={`input ${isAnimating ? \"disabled-input\" : \"\"}`} onChange={updateAnimationDelay} />\r\n                        <span style={{ width: \"22ch\" }} className=\"input-label\">animation speed ({animationDelay} ms) </span>\r\n                    </div>\r\n                    <div className=\"sort-buttons\">\r\n                        <button onClick={() => sort(\"merge\")} style={isAnimating ? disabledBtnStyle : undefined} className=\"header-btn sort-btn\">Merge sort</button>\r\n                        <button onClick={() => sort(\"quick\")} style={isAnimating ? disabledBtnStyle : undefined} className={\"header-btn sort-btn\"}>Quick sort</button>\r\n                        <button onClick={() => sort(\"heap\")} style={isAnimating ? disabledBtnStyle : undefined} className=\"header-btn sort-btn\">Heap sort</button>\r\n                        <button onClick={() => sort(\"comb\")} style={isAnimating ? disabledBtnStyle : undefined} className=\"header-btn sort-btn\">Comb sort</button>\r\n                        <button onClick={() => sort(\"gnome\")} style={isAnimating ? disabledBtnStyle : undefined} className=\"header-btn sort-btn\">Gnome sort</button>\r\n                        <button onClick={() => sort(\"oddeven\")} style={isAnimating ? disabledBtnStyle : undefined} className=\"header-btn sort-btn\">Odd even sort</button>\r\n                        <button onClick={() => sort(\"selection\")} style={isAnimating ? disabledBtnStyle : undefined} className=\"header-btn sort-btn\">Selection sort</button>\r\n                        <button onClick={() => sort(\"bubble\")} style={isAnimating ? disabledBtnStyle : undefined} className=\"header-btn sort-btn\">Bubble sort</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"bar-container\">\r\n                {values.map((value, idx) => {\r\n                    return (\r\n                        <div className=\"bar\" id={idx} key={idx} style={{ height: `${value}px`, width: `${barWidth}px` }}></div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default SortingVisualizer\r\n","import './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<SortingVisualizer></SortingVisualizer>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}